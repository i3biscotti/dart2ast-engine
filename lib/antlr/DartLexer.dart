// Generated from /Users/bonfry/Desktop/dart2kotlin/dart2ast_engine/antrl4/DartLexer.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DartLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_NEWLINE = 1, TOKEN_WS = 2, TOKEN_VAR = 3, TOKEN_FINAL = 4, TOKEN_CONST = 5, 
    TOKEN_INT = 6, TOKEN_DOUBLE = 7, TOKEN_STRING = 8, TOKEN_BOOL = 9, TOKEN_ASSIGN = 10, 
    TOKEN_SEMICOLON = 11, TOKEN_INTLIT = 12, TOKEN_DOUBLELIT = 13, TOKEN_BOOLLIT = 14, 
    TOKEN_STRINGLIT = 15, TOKEN_UnterminatedStringLiteral = 16, TOKEN_ID = 17;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'NEWLINE', 'WS', 'VAR', 'FINAL', 'CONST', 'INT', 'DOUBLE', 'STRING', 
    'BOOL', 'ASSIGN', 'SEMICOLON', 'DecDigit', 'DecDigitNoZero', 'DecDigits', 
    'INTLIT', 'DOUBLELIT', 'BOOLLIT', 'STRINGLIT', 'UnterminatedStringLiteral', 
    'ID'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, null, null, "'var'", "'final'", "'const'", "'int'", "'double'", 
      "'String'", "'bool'", "'='", "';'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "NEWLINE", "WS", "VAR", "FINAL", "CONST", "INT", "DOUBLE", "STRING", 
      "BOOL", "ASSIGN", "SEMICOLON", "INTLIT", "DOUBLELIT", "BOOLLIT", "STRINGLIT", 
      "UnterminatedStringLiteral", "ID"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DartLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'DartLexer.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,17,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,
      1,0,1,0,3,0,45,8,0,1,1,4,1,48,8,1,11,1,12,1,49,1,1,1,1,1,2,1,2,1,2,
      1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
      5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
      1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,4,13,102,8,
      13,11,13,12,13,103,1,14,1,14,5,14,108,8,14,10,14,12,14,111,9,14,1,
      14,3,14,114,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
      1,16,1,16,1,16,3,16,129,8,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
      18,3,18,139,8,18,5,18,141,8,18,10,18,12,18,144,9,18,1,19,1,19,5,19,
      148,8,19,10,19,12,19,151,9,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
      15,8,17,9,19,10,21,11,23,0,25,0,27,0,29,12,31,13,33,14,35,15,37,16,
      39,17,1,0,5,2,0,10,10,13,13,2,0,9,9,32,32,4,0,10,10,13,13,34,34,92,
      92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,158,0,1,1,0,
      0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
      13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,29,
      1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
      0,0,0,1,44,1,0,0,0,3,47,1,0,0,0,5,53,1,0,0,0,7,57,1,0,0,0,9,63,1,0,
      0,0,11,69,1,0,0,0,13,73,1,0,0,0,15,80,1,0,0,0,17,87,1,0,0,0,19,92,
      1,0,0,0,21,94,1,0,0,0,23,96,1,0,0,0,25,98,1,0,0,0,27,101,1,0,0,0,29,
      113,1,0,0,0,31,115,1,0,0,0,33,128,1,0,0,0,35,130,1,0,0,0,37,133,1,
      0,0,0,39,145,1,0,0,0,41,42,5,13,0,0,42,45,5,10,0,0,43,45,7,0,0,0,44,
      41,1,0,0,0,44,43,1,0,0,0,45,2,1,0,0,0,46,48,7,1,0,0,47,46,1,0,0,0,
      48,49,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,51,1,0,0,0,51,52,6,1,
      0,0,52,4,1,0,0,0,53,54,5,118,0,0,54,55,5,97,0,0,55,56,5,114,0,0,56,
      6,1,0,0,0,57,58,5,102,0,0,58,59,5,105,0,0,59,60,5,110,0,0,60,61,5,
      97,0,0,61,62,5,108,0,0,62,8,1,0,0,0,63,64,5,99,0,0,64,65,5,111,0,0,
      65,66,5,110,0,0,66,67,5,115,0,0,67,68,5,116,0,0,68,10,1,0,0,0,69,70,
      5,105,0,0,70,71,5,110,0,0,71,72,5,116,0,0,72,12,1,0,0,0,73,74,5,100,
      0,0,74,75,5,111,0,0,75,76,5,117,0,0,76,77,5,98,0,0,77,78,5,108,0,0,
      78,79,5,101,0,0,79,14,1,0,0,0,80,81,5,83,0,0,81,82,5,116,0,0,82,83,
      5,114,0,0,83,84,5,105,0,0,84,85,5,110,0,0,85,86,5,103,0,0,86,16,1,
      0,0,0,87,88,5,98,0,0,88,89,5,111,0,0,89,90,5,111,0,0,90,91,5,108,0,
      0,91,18,1,0,0,0,92,93,5,61,0,0,93,20,1,0,0,0,94,95,5,59,0,0,95,22,
      1,0,0,0,96,97,2,48,57,0,97,24,1,0,0,0,98,99,2,49,57,0,99,26,1,0,0,
      0,100,102,3,23,11,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,
      0,103,104,1,0,0,0,104,28,1,0,0,0,105,109,3,25,12,0,106,108,3,23,11,
      0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,
      110,114,1,0,0,0,111,109,1,0,0,0,112,114,3,23,11,0,113,105,1,0,0,0,
      113,112,1,0,0,0,114,30,1,0,0,0,115,116,3,23,11,0,116,117,5,46,0,0,
      117,118,3,27,13,0,118,32,1,0,0,0,119,120,5,116,0,0,120,121,5,114,0,
      0,121,122,5,117,0,0,122,129,5,101,0,0,123,124,5,102,0,0,124,125,5,
      97,0,0,125,126,5,108,0,0,126,127,5,115,0,0,127,129,5,101,0,0,128,119,
      1,0,0,0,128,123,1,0,0,0,129,34,1,0,0,0,130,131,3,37,18,0,131,132,5,
      34,0,0,132,36,1,0,0,0,133,142,5,34,0,0,134,141,8,2,0,0,135,138,5,92,
      0,0,136,139,9,0,0,0,137,139,5,0,0,1,138,136,1,0,0,0,138,137,1,0,0,
      0,139,141,1,0,0,0,140,134,1,0,0,0,140,135,1,0,0,0,141,144,1,0,0,0,
      142,140,1,0,0,0,142,143,1,0,0,0,143,38,1,0,0,0,144,142,1,0,0,0,145,
      149,7,3,0,0,146,148,7,4,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,
      1,0,0,0,149,150,1,0,0,0,150,40,1,0,0,0,151,149,1,0,0,0,11,0,44,49,
      103,109,113,128,138,140,142,149,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}