// Generated from d://Progetti personali//dart2kotlin//dart2ast_engine//antrl4//DartLexer.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DartLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_NEWLINE = 1, TOKEN_WS = 2, TOKEN_VAR = 3, TOKEN_FINAL = 4, TOKEN_CONST = 5, 
    TOKEN_INT = 6, TOKEN_DOUBLE = 7, TOKEN_STRING = 8, TOKEN_BOOL = 9, TOKEN_ASSIGN = 10, 
    TOKEN_SEMICOLON = 11, TOKEN_INTLIT = 12, TOKEN_DOUBLELIT = 13, TOKEN_BOOLLIT = 14, 
    TOKEN_STRINGLIT = 15, TOKEN_UnterminatedStringLiteral = 16, TOKEN_ID = 17, 
    TOKEN_PLUS = 18, TOKEN_MINUS = 19, TOKEN_DIVISION = 20, TOKEN_TIMES = 21, 
    TOKEN_MODULE = 22, TOKEN_GREATER_EQUAL_THAN = 23, TOKEN_LOWER_EQUAL_THAN = 24, 
    TOKEN_GREATER_THAN = 25, TOKEN_LOWER_THAN = 26, TOKEN_EQUAL = 27, TOKEN_AND = 28, 
    TOKEN_OR = 29, TOKEN_NOT = 30, TOKEN_PAREN_OPEN = 31, TOKEN_PAREN_CLOSE = 32;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'NEWLINE', 'WS', 'VAR', 'FINAL', 'CONST', 'INT', 'DOUBLE', 'STRING', 
    'BOOL', 'ASSIGN', 'SEMICOLON', 'DecDigit', 'DecDigitNoZero', 'DecDigits', 
    'INTLIT', 'DOUBLELIT', 'BOOLLIT', 'STRINGLIT', 'UnterminatedStringLiteral', 
    'ID', 'PLUS', 'MINUS', 'DIVISION', 'TIMES', 'MODULE', 'GREATER_EQUAL_THAN', 
    'LOWER_EQUAL_THAN', 'GREATER_THAN', 'LOWER_THAN', 'EQUAL', 'AND', 'OR', 
    'NOT', 'PAREN_OPEN', 'PAREN_CLOSE'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, null, null, "'var'", "'final'", "'const'", "'int'", "'double'", 
      "'String'", "'bool'", "'='", "';'", null, null, null, null, null, 
      null, "'+'", "'-'", "'/'", "'*'", "'%'", "'>='", "'<='", "'>'", "'<'", 
      "'=='", "'&&'", "'||'", "'!'", "'('", "')'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "NEWLINE", "WS", "VAR", "FINAL", "CONST", "INT", "DOUBLE", "STRING", 
      "BOOL", "ASSIGN", "SEMICOLON", "INTLIT", "DOUBLELIT", "BOOLLIT", "STRINGLIT", 
      "UnterminatedStringLiteral", "ID", "PLUS", "MINUS", "DIVISION", "TIMES", 
      "MODULE", "GREATER_EQUAL_THAN", "LOWER_EQUAL_THAN", "GREATER_THAN", 
      "LOWER_THAN", "EQUAL", "AND", "OR", "NOT", "PAREN_OPEN", "PAREN_CLOSE"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DartLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'DartLexer.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,32,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,1,0,1,0,1,0,3,0,75,8,0,1,1,4,1,78,8,1,11,1,12,1,79,1,1,1,
      1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
      1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
      7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
      13,4,13,132,8,13,11,13,12,13,133,1,14,1,14,5,14,138,8,14,10,14,12,
      14,141,9,14,1,14,3,14,144,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
      1,16,1,16,1,16,1,16,1,16,1,16,3,16,159,8,16,1,17,1,17,1,17,1,18,1,
      18,1,18,1,18,1,18,3,18,169,8,18,5,18,171,8,18,10,18,12,18,174,9,18,
      1,19,1,19,5,19,178,8,19,10,19,12,19,181,9,19,1,20,1,20,1,21,1,21,1,
      22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
      1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,
      33,1,33,1,34,1,34,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
      10,21,11,23,0,25,0,27,0,29,12,31,13,33,14,35,15,37,16,39,17,41,18,
      43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,
      65,30,67,31,69,32,1,0,5,2,0,10,10,13,13,2,0,9,9,32,32,4,0,10,10,13,
      13,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
      223,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
      11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
      1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
      0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
      0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
      0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
      0,69,1,0,0,0,1,74,1,0,0,0,3,77,1,0,0,0,5,83,1,0,0,0,7,87,1,0,0,0,9,
      93,1,0,0,0,11,99,1,0,0,0,13,103,1,0,0,0,15,110,1,0,0,0,17,117,1,0,
      0,0,19,122,1,0,0,0,21,124,1,0,0,0,23,126,1,0,0,0,25,128,1,0,0,0,27,
      131,1,0,0,0,29,143,1,0,0,0,31,145,1,0,0,0,33,158,1,0,0,0,35,160,1,
      0,0,0,37,163,1,0,0,0,39,175,1,0,0,0,41,182,1,0,0,0,43,184,1,0,0,0,
      45,186,1,0,0,0,47,188,1,0,0,0,49,190,1,0,0,0,51,192,1,0,0,0,53,195,
      1,0,0,0,55,198,1,0,0,0,57,200,1,0,0,0,59,202,1,0,0,0,61,205,1,0,0,
      0,63,208,1,0,0,0,65,211,1,0,0,0,67,213,1,0,0,0,69,215,1,0,0,0,71,72,
      5,13,0,0,72,75,5,10,0,0,73,75,7,0,0,0,74,71,1,0,0,0,74,73,1,0,0,0,
      75,2,1,0,0,0,76,78,7,1,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,
      0,79,80,1,0,0,0,80,81,1,0,0,0,81,82,6,1,0,0,82,4,1,0,0,0,83,84,5,118,
      0,0,84,85,5,97,0,0,85,86,5,114,0,0,86,6,1,0,0,0,87,88,5,102,0,0,88,
      89,5,105,0,0,89,90,5,110,0,0,90,91,5,97,0,0,91,92,5,108,0,0,92,8,1,
      0,0,0,93,94,5,99,0,0,94,95,5,111,0,0,95,96,5,110,0,0,96,97,5,115,0,
      0,97,98,5,116,0,0,98,10,1,0,0,0,99,100,5,105,0,0,100,101,5,110,0,0,
      101,102,5,116,0,0,102,12,1,0,0,0,103,104,5,100,0,0,104,105,5,111,0,
      0,105,106,5,117,0,0,106,107,5,98,0,0,107,108,5,108,0,0,108,109,5,101,
      0,0,109,14,1,0,0,0,110,111,5,83,0,0,111,112,5,116,0,0,112,113,5,114,
      0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,5,103,0,0,116,16,1,
      0,0,0,117,118,5,98,0,0,118,119,5,111,0,0,119,120,5,111,0,0,120,121,
      5,108,0,0,121,18,1,0,0,0,122,123,5,61,0,0,123,20,1,0,0,0,124,125,5,
      59,0,0,125,22,1,0,0,0,126,127,2,48,57,0,127,24,1,0,0,0,128,129,2,49,
      57,0,129,26,1,0,0,0,130,132,3,23,11,0,131,130,1,0,0,0,132,133,1,0,
      0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,28,1,0,0,0,135,139,3,25,12,
      0,136,138,3,23,11,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,
      0,139,140,1,0,0,0,140,144,1,0,0,0,141,139,1,0,0,0,142,144,3,23,11,
      0,143,135,1,0,0,0,143,142,1,0,0,0,144,30,1,0,0,0,145,146,3,23,11,0,
      146,147,5,46,0,0,147,148,3,27,13,0,148,32,1,0,0,0,149,150,5,116,0,
      0,150,151,5,114,0,0,151,152,5,117,0,0,152,159,5,101,0,0,153,154,5,
      102,0,0,154,155,5,97,0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,159,
      5,101,0,0,158,149,1,0,0,0,158,153,1,0,0,0,159,34,1,0,0,0,160,161,3,
      37,18,0,161,162,5,34,0,0,162,36,1,0,0,0,163,172,5,34,0,0,164,171,8,
      2,0,0,165,168,5,92,0,0,166,169,9,0,0,0,167,169,5,0,0,1,168,166,1,0,
      0,0,168,167,1,0,0,0,169,171,1,0,0,0,170,164,1,0,0,0,170,165,1,0,0,
      0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,38,1,0,0,0,174,
      172,1,0,0,0,175,179,7,3,0,0,176,178,7,4,0,0,177,176,1,0,0,0,178,181,
      1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,40,1,0,0,0,181,179,1,0,
      0,0,182,183,5,43,0,0,183,42,1,0,0,0,184,185,5,45,0,0,185,44,1,0,0,
      0,186,187,5,47,0,0,187,46,1,0,0,0,188,189,5,42,0,0,189,48,1,0,0,0,
      190,191,5,37,0,0,191,50,1,0,0,0,192,193,5,62,0,0,193,194,5,61,0,0,
      194,52,1,0,0,0,195,196,5,60,0,0,196,197,5,61,0,0,197,54,1,0,0,0,198,
      199,5,62,0,0,199,56,1,0,0,0,200,201,5,60,0,0,201,58,1,0,0,0,202,203,
      5,61,0,0,203,204,5,61,0,0,204,60,1,0,0,0,205,206,5,38,0,0,206,207,
      5,38,0,0,207,62,1,0,0,0,208,209,5,124,0,0,209,210,5,124,0,0,210,64,
      1,0,0,0,211,212,5,33,0,0,212,66,1,0,0,0,213,214,5,40,0,0,214,68,1,
      0,0,0,215,216,5,41,0,0,216,70,1,0,0,0,11,0,74,79,133,139,143,158,168,
      170,172,179,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}