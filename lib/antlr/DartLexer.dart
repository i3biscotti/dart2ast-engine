// Generated from d://Progetti personali//dart2kotlin//dart2ast_engine//antrl4//DartLexer.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DartLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_WS = 1, TOKEN_VAR = 2, TOKEN_FINAL = 3, TOKEN_CONST = 4, TOKEN_CLASS = 5, 
    TOKEN_THIS = 6, TOKEN_INT = 7, TOKEN_DOUBLE = 8, TOKEN_STRING = 9, TOKEN_BOOL = 10, 
    TOKEN_VOID = 11, TOKEN_ASSIGN = 12, TOKEN_SEMICOLON = 13, TOKEN_INTLIT = 14, 
    TOKEN_DOUBLELIT = 15, TOKEN_BOOLLIT = 16, TOKEN_STRINGLIT = 17, TOKEN_PLUS = 18, 
    TOKEN_MINUS = 19, TOKEN_DIVISION = 20, TOKEN_TIMES = 21, TOKEN_MODULE = 22, 
    TOKEN_GREATER_EQUAL_THAN = 23, TOKEN_LOWER_EQUAL_THAN = 24, TOKEN_GREATER_THAN = 25, 
    TOKEN_LOWER_THAN = 26, TOKEN_EQUAL = 27, TOKEN_AND = 28, TOKEN_OR = 29, 
    TOKEN_NOT = 30, TOKEN_PAREN_OPEN = 31, TOKEN_PAREN_CLOSE = 32, TOKEN_GRAPH_OPEN = 33, 
    TOKEN_GRAPH_CLOSE = 34, TOKEN_COMMA = 35, TOKEN_DOT = 36, TOKEN_ID = 37, 
    TOKEN_UnterminatedStringLiteral = 38;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'WS', 'VAR', 'FINAL', 'CONST', 'CLASS', 'THIS', 'INT', 'DOUBLE', 'STRING', 
    'BOOL', 'VOID', 'ASSIGN', 'SEMICOLON', 'INTLIT', 'DOUBLELIT', 'BOOLLIT', 
    'STRINGLIT', 'PLUS', 'MINUS', 'DIVISION', 'TIMES', 'MODULE', 'GREATER_EQUAL_THAN', 
    'LOWER_EQUAL_THAN', 'GREATER_THAN', 'LOWER_THAN', 'EQUAL', 'AND', 'OR', 
    'NOT', 'PAREN_OPEN', 'PAREN_CLOSE', 'GRAPH_OPEN', 'GRAPH_CLOSE', 'COMMA', 
    'DOT', 'ID', 'DecDigit', 'DecDigitNoZero', 'DecDigits', 'UnterminatedStringLiteral'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, null, "'var'", "'final'", "'const'", "'class'", "'this'", "'int'", 
      "'double'", "'String'", "'bool'", "'void'", "'='", "';'", null, null, 
      null, null, "'+'", "'-'", "'/'", "'*'", "'%'", "'>='", "'<='", "'>'", 
      "'<'", "'=='", "'&&'", "'||'", "'!'", "'('", "')'", "'{'", "'}'", 
      "','", "'.'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "WS", "VAR", "FINAL", "CONST", "CLASS", "THIS", "INT", "DOUBLE", 
      "STRING", "BOOL", "VOID", "ASSIGN", "SEMICOLON", "INTLIT", "DOUBLELIT", 
      "BOOLLIT", "STRINGLIT", "PLUS", "MINUS", "DIVISION", "TIMES", "MODULE", 
      "GREATER_EQUAL_THAN", "LOWER_EQUAL_THAN", "GREATER_THAN", "LOWER_THAN", 
      "EQUAL", "AND", "OR", "NOT", "PAREN_OPEN", "PAREN_CLOSE", "GRAPH_OPEN", 
      "GRAPH_CLOSE", "COMMA", "DOT", "ID", "UnterminatedStringLiteral"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DartLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'DartLexer.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,38,248,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
      40,1,0,4,0,85,8,0,11,0,12,0,86,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
      1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
      5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
      1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
      11,1,11,1,12,1,12,1,13,1,13,5,13,152,8,13,10,13,12,13,155,9,13,1,13,
      3,13,158,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
      15,1,15,1,15,3,15,173,8,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
      1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
      25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,
      1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,5,
      36,223,8,36,10,36,12,36,226,9,36,1,37,1,37,1,38,1,38,1,39,4,39,233,
      8,39,11,39,12,39,234,1,40,1,40,1,40,1,40,1,40,3,40,242,8,40,5,40,244,
      8,40,10,40,12,40,247,9,40,0,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
      8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
      39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
      61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,0,77,0,79,0,81,38,1,0,
      4,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
      97,122,4,0,10,10,13,13,34,34,92,92,253,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
      1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
      0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
      0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
      0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
      47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
      1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
      0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,81,1,0,0,0,1,84,1,0,
      0,0,3,90,1,0,0,0,5,94,1,0,0,0,7,100,1,0,0,0,9,106,1,0,0,0,11,112,1,
      0,0,0,13,117,1,0,0,0,15,121,1,0,0,0,17,128,1,0,0,0,19,135,1,0,0,0,
      21,140,1,0,0,0,23,145,1,0,0,0,25,147,1,0,0,0,27,157,1,0,0,0,29,159,
      1,0,0,0,31,172,1,0,0,0,33,174,1,0,0,0,35,177,1,0,0,0,37,179,1,0,0,
      0,39,181,1,0,0,0,41,183,1,0,0,0,43,185,1,0,0,0,45,187,1,0,0,0,47,190,
      1,0,0,0,49,193,1,0,0,0,51,195,1,0,0,0,53,197,1,0,0,0,55,200,1,0,0,
      0,57,203,1,0,0,0,59,206,1,0,0,0,61,208,1,0,0,0,63,210,1,0,0,0,65,212,
      1,0,0,0,67,214,1,0,0,0,69,216,1,0,0,0,71,218,1,0,0,0,73,220,1,0,0,
      0,75,227,1,0,0,0,77,229,1,0,0,0,79,232,1,0,0,0,81,236,1,0,0,0,83,85,
      7,0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
      88,1,0,0,0,88,89,6,0,0,0,89,2,1,0,0,0,90,91,5,118,0,0,91,92,5,97,0,
      0,92,93,5,114,0,0,93,4,1,0,0,0,94,95,5,102,0,0,95,96,5,105,0,0,96,
      97,5,110,0,0,97,98,5,97,0,0,98,99,5,108,0,0,99,6,1,0,0,0,100,101,5,
      99,0,0,101,102,5,111,0,0,102,103,5,110,0,0,103,104,5,115,0,0,104,105,
      5,116,0,0,105,8,1,0,0,0,106,107,5,99,0,0,107,108,5,108,0,0,108,109,
      5,97,0,0,109,110,5,115,0,0,110,111,5,115,0,0,111,10,1,0,0,0,112,113,
      5,116,0,0,113,114,5,104,0,0,114,115,5,105,0,0,115,116,5,115,0,0,116,
      12,1,0,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,120,5,116,0,0,120,
      14,1,0,0,0,121,122,5,100,0,0,122,123,5,111,0,0,123,124,5,117,0,0,124,
      125,5,98,0,0,125,126,5,108,0,0,126,127,5,101,0,0,127,16,1,0,0,0,128,
      129,5,83,0,0,129,130,5,116,0,0,130,131,5,114,0,0,131,132,5,105,0,0,
      132,133,5,110,0,0,133,134,5,103,0,0,134,18,1,0,0,0,135,136,5,98,0,
      0,136,137,5,111,0,0,137,138,5,111,0,0,138,139,5,108,0,0,139,20,1,0,
      0,0,140,141,5,118,0,0,141,142,5,111,0,0,142,143,5,105,0,0,143,144,
      5,100,0,0,144,22,1,0,0,0,145,146,5,61,0,0,146,24,1,0,0,0,147,148,5,
      59,0,0,148,26,1,0,0,0,149,153,3,77,38,0,150,152,3,75,37,0,151,150,
      1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,158,1,
      0,0,0,155,153,1,0,0,0,156,158,3,75,37,0,157,149,1,0,0,0,157,156,1,
      0,0,0,158,28,1,0,0,0,159,160,3,75,37,0,160,161,5,46,0,0,161,162,3,
      79,39,0,162,30,1,0,0,0,163,164,5,116,0,0,164,165,5,114,0,0,165,166,
      5,117,0,0,166,173,5,101,0,0,167,168,5,102,0,0,168,169,5,97,0,0,169,
      170,5,108,0,0,170,171,5,115,0,0,171,173,5,101,0,0,172,163,1,0,0,0,
      172,167,1,0,0,0,173,32,1,0,0,0,174,175,3,81,40,0,175,176,5,34,0,0,
      176,34,1,0,0,0,177,178,5,43,0,0,178,36,1,0,0,0,179,180,5,45,0,0,180,
      38,1,0,0,0,181,182,5,47,0,0,182,40,1,0,0,0,183,184,5,42,0,0,184,42,
      1,0,0,0,185,186,5,37,0,0,186,44,1,0,0,0,187,188,5,62,0,0,188,189,5,
      61,0,0,189,46,1,0,0,0,190,191,5,60,0,0,191,192,5,61,0,0,192,48,1,0,
      0,0,193,194,5,62,0,0,194,50,1,0,0,0,195,196,5,60,0,0,196,52,1,0,0,
      0,197,198,5,61,0,0,198,199,5,61,0,0,199,54,1,0,0,0,200,201,5,38,0,
      0,201,202,5,38,0,0,202,56,1,0,0,0,203,204,5,124,0,0,204,205,5,124,
      0,0,205,58,1,0,0,0,206,207,5,33,0,0,207,60,1,0,0,0,208,209,5,40,0,
      0,209,62,1,0,0,0,210,211,5,41,0,0,211,64,1,0,0,0,212,213,5,123,0,0,
      213,66,1,0,0,0,214,215,5,125,0,0,215,68,1,0,0,0,216,217,5,44,0,0,217,
      70,1,0,0,0,218,219,5,46,0,0,219,72,1,0,0,0,220,224,7,1,0,0,221,223,
      7,2,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,
      0,0,0,225,74,1,0,0,0,226,224,1,0,0,0,227,228,2,48,57,0,228,76,1,0,
      0,0,229,230,2,49,57,0,230,78,1,0,0,0,231,233,3,75,37,0,232,231,1,0,
      0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,80,1,0,0,0,
      236,245,5,34,0,0,237,244,8,3,0,0,238,241,5,92,0,0,239,242,9,0,0,0,
      240,242,5,0,0,1,241,239,1,0,0,0,241,240,1,0,0,0,242,244,1,0,0,0,243,
      237,1,0,0,0,243,238,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,
      1,0,0,0,246,82,1,0,0,0,247,245,1,0,0,0,10,0,86,153,157,172,224,234,
      241,243,245,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}