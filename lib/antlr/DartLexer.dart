// Generated from D:/Progetti personali/dart2kotlin/dart2ast_engine/antrl4/DartLexer.g4 by ANTLR 4.13.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DartLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.13.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_WS = 1, TOKEN_VAR = 2, TOKEN_FINAL = 3, TOKEN_CONST = 4, TOKEN_CLASS = 5, 
    TOKEN_THIS = 6, TOKEN_INT = 7, TOKEN_DOUBLE = 8, TOKEN_STRING = 9, TOKEN_BOOL = 10, 
    TOKEN_VOID = 11, TOKEN_LIST = 12, TOKEN_ASSIGN = 13, TOKEN_SEMICOLON = 14, 
    TOKEN_INTLIT = 15, TOKEN_DOUBLELIT = 16, TOKEN_BOOLLIT = 17, TOKEN_STRINGLIT = 18, 
    TOKEN_PLUS = 19, TOKEN_MINUS = 20, TOKEN_DIVISION = 21, TOKEN_TIMES = 22, 
    TOKEN_MODULE = 23, TOKEN_GREATER_EQUAL_THAN = 24, TOKEN_LOWER_EQUAL_THAN = 25, 
    TOKEN_GREATER_THAN = 26, TOKEN_LOWER_THAN = 27, TOKEN_EQUAL = 28, TOKEN_NOT_EQUAL = 29, 
    TOKEN_AND = 30, TOKEN_OR = 31, TOKEN_NOT = 32, TOKEN_PAREN_OPEN = 33, 
    TOKEN_PAREN_CLOSE = 34, TOKEN_SQUARE_OPEN = 35, TOKEN_SQUARE_CLOSE = 36, 
    TOKEN_GRAPH_OPEN = 37, TOKEN_GRAPH_CLOSE = 38, TOKEN_COMMA = 39, TOKEN_DOT = 40, 
    TOKEN_COLONS = 41, TOKEN_RETURN = 42, TOKEN_EXTENDS = 43, TOKEN_IF = 44, 
    TOKEN_ELSE = 45, TOKEN_WHILE = 46, TOKEN_FOR = 47, TOKEN_IN = 48, TOKEN_STDIN = 49, 
    TOKEN_READLINESYNC = 50, TOKEN_PRINT = 51, TOKEN_ID = 52, TOKEN_UnterminatedStringLiteral = 53;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'WS', 'VAR', 'FINAL', 'CONST', 'CLASS', 'THIS', 'INT', 'DOUBLE', 'STRING', 
    'BOOL', 'VOID', 'LIST', 'ASSIGN', 'SEMICOLON', 'INTLIT', 'DOUBLELIT', 
    'BOOLLIT', 'STRINGLIT', 'PLUS', 'MINUS', 'DIVISION', 'TIMES', 'MODULE', 
    'GREATER_EQUAL_THAN', 'LOWER_EQUAL_THAN', 'GREATER_THAN', 'LOWER_THAN', 
    'EQUAL', 'NOT_EQUAL', 'AND', 'OR', 'NOT', 'PAREN_OPEN', 'PAREN_CLOSE', 
    'SQUARE_OPEN', 'SQUARE_CLOSE', 'GRAPH_OPEN', 'GRAPH_CLOSE', 'COMMA', 
    'DOT', 'COLONS', 'RETURN', 'EXTENDS', 'IF', 'ELSE', 'WHILE', 'FOR', 
    'IN', 'STDIN', 'READLINESYNC', 'PRINT', 'ID', 'DecDigit', 'DecDigitNoZero', 
    'DecDigits', 'UnterminatedStringLiteral'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, null, "'var'", "'final'", "'const'", "'class'", "'this'", "'int'", 
      "'double'", "'String'", "'bool'", "'void'", "'List'", "'='", "';'", 
      null, null, null, null, "'+'", "'-'", "'/'", "'*'", "'%'", "'>='", 
      "'<='", "'>'", "'<'", "'=='", "'!='", "'&&'", "'||'", "'!'", "'('", 
      "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", "':'", "'return'", 
      "'extends'", "'if'", "'else'", "'while'", "'for'", "'in'", "'stdin'", 
      "'readLineSync'", "'print'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "WS", "VAR", "FINAL", "CONST", "CLASS", "THIS", "INT", "DOUBLE", 
      "STRING", "BOOL", "VOID", "LIST", "ASSIGN", "SEMICOLON", "INTLIT", 
      "DOUBLELIT", "BOOLLIT", "STRINGLIT", "PLUS", "MINUS", "DIVISION", 
      "TIMES", "MODULE", "GREATER_EQUAL_THAN", "LOWER_EQUAL_THAN", "GREATER_THAN", 
      "LOWER_THAN", "EQUAL", "NOT_EQUAL", "AND", "OR", "NOT", "PAREN_OPEN", 
      "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "GRAPH_OPEN", "GRAPH_CLOSE", 
      "COMMA", "DOT", "COLONS", "RETURN", "EXTENDS", "IF", "ELSE", "WHILE", 
      "FOR", "IN", "STDIN", "READLINESYNC", "PRINT", "ID", "UnterminatedStringLiteral"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DartLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'DartLexer.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,53,362,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
      2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
      40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,
      7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,
      54,7,54,2,55,7,55,1,0,4,0,115,8,0,11,0,12,0,116,1,0,1,0,1,1,1,1,1,
      1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
      1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
      7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
      1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
      14,5,14,187,8,14,10,14,12,14,190,9,14,1,14,3,14,193,8,14,1,15,1,15,
      5,15,197,8,15,10,15,12,15,200,9,15,1,15,3,15,203,8,15,1,15,1,15,1,
      15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,217,8,16,1,17,
      1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
      23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
      1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,
      34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
      1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
      42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
      1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
      48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
      1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,5,51,337,8,51,10,51,12,
      51,340,9,51,1,52,1,52,1,53,1,53,1,54,4,54,347,8,54,11,54,12,54,348,
      1,55,1,55,1,55,1,55,1,55,3,55,356,8,55,5,55,358,8,55,10,55,12,55,361,
      9,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
      12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
      23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
      34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
      45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,0,107,0,109,0,111,
      53,1,0,4,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
      90,95,95,97,122,4,0,10,10,13,13,34,34,92,92,369,0,1,1,0,0,0,0,3,1,
      0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
      0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
      0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
      35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
      1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
      0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
      0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
      0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
      0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
      97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,111,1,0,0,0,
      1,114,1,0,0,0,3,120,1,0,0,0,5,124,1,0,0,0,7,130,1,0,0,0,9,136,1,0,
      0,0,11,142,1,0,0,0,13,147,1,0,0,0,15,151,1,0,0,0,17,158,1,0,0,0,19,
      165,1,0,0,0,21,170,1,0,0,0,23,175,1,0,0,0,25,180,1,0,0,0,27,182,1,
      0,0,0,29,192,1,0,0,0,31,202,1,0,0,0,33,216,1,0,0,0,35,218,1,0,0,0,
      37,221,1,0,0,0,39,223,1,0,0,0,41,225,1,0,0,0,43,227,1,0,0,0,45,229,
      1,0,0,0,47,231,1,0,0,0,49,234,1,0,0,0,51,237,1,0,0,0,53,239,1,0,0,
      0,55,241,1,0,0,0,57,244,1,0,0,0,59,247,1,0,0,0,61,250,1,0,0,0,63,253,
      1,0,0,0,65,255,1,0,0,0,67,257,1,0,0,0,69,259,1,0,0,0,71,261,1,0,0,
      0,73,263,1,0,0,0,75,265,1,0,0,0,77,267,1,0,0,0,79,269,1,0,0,0,81,271,
      1,0,0,0,83,273,1,0,0,0,85,280,1,0,0,0,87,288,1,0,0,0,89,291,1,0,0,
      0,91,296,1,0,0,0,93,302,1,0,0,0,95,306,1,0,0,0,97,309,1,0,0,0,99,315,
      1,0,0,0,101,328,1,0,0,0,103,334,1,0,0,0,105,341,1,0,0,0,107,343,1,
      0,0,0,109,346,1,0,0,0,111,350,1,0,0,0,113,115,7,0,0,0,114,113,1,0,
      0,0,115,116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,
      0,118,119,6,0,0,0,119,2,1,0,0,0,120,121,5,118,0,0,121,122,5,97,0,0,
      122,123,5,114,0,0,123,4,1,0,0,0,124,125,5,102,0,0,125,126,5,105,0,
      0,126,127,5,110,0,0,127,128,5,97,0,0,128,129,5,108,0,0,129,6,1,0,0,
      0,130,131,5,99,0,0,131,132,5,111,0,0,132,133,5,110,0,0,133,134,5,115,
      0,0,134,135,5,116,0,0,135,8,1,0,0,0,136,137,5,99,0,0,137,138,5,108,
      0,0,138,139,5,97,0,0,139,140,5,115,0,0,140,141,5,115,0,0,141,10,1,
      0,0,0,142,143,5,116,0,0,143,144,5,104,0,0,144,145,5,105,0,0,145,146,
      5,115,0,0,146,12,1,0,0,0,147,148,5,105,0,0,148,149,5,110,0,0,149,150,
      5,116,0,0,150,14,1,0,0,0,151,152,5,100,0,0,152,153,5,111,0,0,153,154,
      5,117,0,0,154,155,5,98,0,0,155,156,5,108,0,0,156,157,5,101,0,0,157,
      16,1,0,0,0,158,159,5,83,0,0,159,160,5,116,0,0,160,161,5,114,0,0,161,
      162,5,105,0,0,162,163,5,110,0,0,163,164,5,103,0,0,164,18,1,0,0,0,165,
      166,5,98,0,0,166,167,5,111,0,0,167,168,5,111,0,0,168,169,5,108,0,0,
      169,20,1,0,0,0,170,171,5,118,0,0,171,172,5,111,0,0,172,173,5,105,0,
      0,173,174,5,100,0,0,174,22,1,0,0,0,175,176,5,76,0,0,176,177,5,105,
      0,0,177,178,5,115,0,0,178,179,5,116,0,0,179,24,1,0,0,0,180,181,5,61,
      0,0,181,26,1,0,0,0,182,183,5,59,0,0,183,28,1,0,0,0,184,188,3,107,53,
      0,185,187,3,105,52,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,
      0,188,189,1,0,0,0,189,193,1,0,0,0,190,188,1,0,0,0,191,193,3,105,52,
      0,192,184,1,0,0,0,192,191,1,0,0,0,193,30,1,0,0,0,194,198,3,107,53,
      0,195,197,3,105,52,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,
      0,198,199,1,0,0,0,199,203,1,0,0,0,200,198,1,0,0,0,201,203,3,105,52,
      0,202,194,1,0,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,205,5,46,0,0,
      205,206,3,109,54,0,206,32,1,0,0,0,207,208,5,116,0,0,208,209,5,114,
      0,0,209,210,5,117,0,0,210,217,5,101,0,0,211,212,5,102,0,0,212,213,
      5,97,0,0,213,214,5,108,0,0,214,215,5,115,0,0,215,217,5,101,0,0,216,
      207,1,0,0,0,216,211,1,0,0,0,217,34,1,0,0,0,218,219,3,111,55,0,219,
      220,5,34,0,0,220,36,1,0,0,0,221,222,5,43,0,0,222,38,1,0,0,0,223,224,
      5,45,0,0,224,40,1,0,0,0,225,226,5,47,0,0,226,42,1,0,0,0,227,228,5,
      42,0,0,228,44,1,0,0,0,229,230,5,37,0,0,230,46,1,0,0,0,231,232,5,62,
      0,0,232,233,5,61,0,0,233,48,1,0,0,0,234,235,5,60,0,0,235,236,5,61,
      0,0,236,50,1,0,0,0,237,238,5,62,0,0,238,52,1,0,0,0,239,240,5,60,0,
      0,240,54,1,0,0,0,241,242,5,61,0,0,242,243,5,61,0,0,243,56,1,0,0,0,
      244,245,5,33,0,0,245,246,5,61,0,0,246,58,1,0,0,0,247,248,5,38,0,0,
      248,249,5,38,0,0,249,60,1,0,0,0,250,251,5,124,0,0,251,252,5,124,0,
      0,252,62,1,0,0,0,253,254,5,33,0,0,254,64,1,0,0,0,255,256,5,40,0,0,
      256,66,1,0,0,0,257,258,5,41,0,0,258,68,1,0,0,0,259,260,5,91,0,0,260,
      70,1,0,0,0,261,262,5,93,0,0,262,72,1,0,0,0,263,264,5,123,0,0,264,74,
      1,0,0,0,265,266,5,125,0,0,266,76,1,0,0,0,267,268,5,44,0,0,268,78,1,
      0,0,0,269,270,5,46,0,0,270,80,1,0,0,0,271,272,5,58,0,0,272,82,1,0,
      0,0,273,274,5,114,0,0,274,275,5,101,0,0,275,276,5,116,0,0,276,277,
      5,117,0,0,277,278,5,114,0,0,278,279,5,110,0,0,279,84,1,0,0,0,280,281,
      5,101,0,0,281,282,5,120,0,0,282,283,5,116,0,0,283,284,5,101,0,0,284,
      285,5,110,0,0,285,286,5,100,0,0,286,287,5,115,0,0,287,86,1,0,0,0,288,
      289,5,105,0,0,289,290,5,102,0,0,290,88,1,0,0,0,291,292,5,101,0,0,292,
      293,5,108,0,0,293,294,5,115,0,0,294,295,5,101,0,0,295,90,1,0,0,0,296,
      297,5,119,0,0,297,298,5,104,0,0,298,299,5,105,0,0,299,300,5,108,0,
      0,300,301,5,101,0,0,301,92,1,0,0,0,302,303,5,102,0,0,303,304,5,111,
      0,0,304,305,5,114,0,0,305,94,1,0,0,0,306,307,5,105,0,0,307,308,5,110,
      0,0,308,96,1,0,0,0,309,310,5,115,0,0,310,311,5,116,0,0,311,312,5,100,
      0,0,312,313,5,105,0,0,313,314,5,110,0,0,314,98,1,0,0,0,315,316,5,114,
      0,0,316,317,5,101,0,0,317,318,5,97,0,0,318,319,5,100,0,0,319,320,5,
      76,0,0,320,321,5,105,0,0,321,322,5,110,0,0,322,323,5,101,0,0,323,324,
      5,83,0,0,324,325,5,121,0,0,325,326,5,110,0,0,326,327,5,99,0,0,327,
      100,1,0,0,0,328,329,5,112,0,0,329,330,5,114,0,0,330,331,5,105,0,0,
      331,332,5,110,0,0,332,333,5,116,0,0,333,102,1,0,0,0,334,338,7,1,0,
      0,335,337,7,2,0,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,
      338,339,1,0,0,0,339,104,1,0,0,0,340,338,1,0,0,0,341,342,2,48,57,0,
      342,106,1,0,0,0,343,344,2,49,57,0,344,108,1,0,0,0,345,347,3,105,52,
      0,346,345,1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,
      349,110,1,0,0,0,350,359,5,34,0,0,351,358,8,3,0,0,352,355,5,92,0,0,
      353,356,9,0,0,0,354,356,5,0,0,1,355,353,1,0,0,0,355,354,1,0,0,0,356,
      358,1,0,0,0,357,351,1,0,0,0,357,352,1,0,0,0,358,361,1,0,0,0,359,357,
      1,0,0,0,359,360,1,0,0,0,360,112,1,0,0,0,361,359,1,0,0,0,12,0,116,188,
      192,198,202,216,338,348,355,357,359,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}